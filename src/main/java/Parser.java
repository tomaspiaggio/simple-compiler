
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import operator.Operator;
import operator.impl.integer.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\003\000\002\003\004\000\002" +
    "\003\005\000\002\005\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\015\006\000\002\015\010\000\002\016\006\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\014\011\016\013\005\014\013\017\014\043" +
    "\006\001\002\000\010\002\uffe0\012\uffe0\030\uffe0\001\002" +
    "\000\012\002\uffe2\012\uffe2\016\uffe2\030\uffe2\001\002\000" +
    "\004\021\076\001\002\000\012\002\uffe3\012\uffe3\016\uffe3" +
    "\030\uffe3\001\002\000\012\002\uffe5\012\uffe5\016\uffe5\030" +
    "\uffe5\001\002\000\004\002\075\001\002\000\012\002\uffe6" +
    "\012\uffe6\016\uffe6\030\uffe6\001\002\000\020\006\051\007" +
    "\046\010\047\033\027\041\033\043\030\044\025\001\002" +
    "\000\004\037\023\001\002\000\006\002\uffdb\030\020\001" +
    "\002\000\014\011\016\013\005\014\013\017\014\043\006" +
    "\001\002\000\006\012\021\030\020\001\002\000\014\011" +
    "\016\013\005\014\013\017\014\043\006\001\002\000\012" +
    "\002\uffe4\012\uffe4\016\uffe4\030\uffe4\001\002\000\010\002" +
    "\uffe1\012\uffe1\030\uffe1\001\002\000\012\033\027\041\033" +
    "\043\030\044\025\001\002\000\050\002\ufff8\004\ufff8\005" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\040\ufff8\001\002\000\050\002\ufff4" +
    "\004\ufff4\005\ufff4\012\ufff4\015\ufff4\016\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\001\002\000" +
    "\050\002\ufff9\004\ufff9\005\ufff9\012\ufff9\015\ufff9\016\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9" +
    "\001\002\000\012\033\027\041\033\043\030\044\025\001" +
    "\002\000\050\002\ufffb\004\ufffb\005\ufffb\012\ufffb\015\ufffb" +
    "\016\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\040\ufffb\001\002\000\016\032\036\033\037\034\042\035" +
    "\041\036\035\040\034\001\002\000\050\002\ufffa\004\ufffa" +
    "\005\ufffa\012\ufffa\015\ufffa\016\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\040\ufffa\001\002\000\050\002" +
    "\ufff7\004\ufff7\005\ufff7\012\ufff7\015\ufff7\016\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\001\002" +
    "\000\012\002\uffdc\012\uffdc\016\uffdc\030\uffdc\001\002\000" +
    "\012\033\ufffc\041\ufffc\043\ufffc\044\ufffc\001\002\000\012" +
    "\033\000\041\000\043\000\044\000\001\002\000\012\033" +
    "\uffff\041\uffff\043\uffff\044\uffff\001\002\000\012\033\027" +
    "\041\033\043\030\044\025\001\002\000\012\033\ufffd\041" +
    "\ufffd\043\ufffd\044\ufffd\001\002\000\012\033\ufffe\041\ufffe" +
    "\043\ufffe\044\ufffe\001\002\000\050\002\ufff5\004\ufff5\005" +
    "\ufff5\012\ufff5\015\ufff5\016\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\036\033\037\034" +
    "\042\035\041\036\035\040\ufff5\001\002\000\050\002\ufff6" +
    "\004\ufff6\005\ufff6\012\ufff6\015\ufff6\016\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6" +
    "\033\ufff6\034\042\035\041\036\035\040\ufff6\001\002\000" +
    "\010\004\053\005\054\015\071\001\002\000\010\004\uffed" +
    "\005\uffed\015\uffed\001\002\000\010\004\uffec\005\uffec\015" +
    "\uffec\001\002\000\030\022\062\023\066\024\063\025\064" +
    "\026\057\027\065\032\036\033\037\034\042\035\041\036" +
    "\035\001\002\000\020\006\051\007\046\010\047\033\027" +
    "\041\033\043\030\044\025\001\002\000\010\004\uffeb\005" +
    "\uffeb\015\uffeb\001\002\000\020\006\051\007\046\010\047" +
    "\033\027\041\033\043\030\044\025\001\002\000\020\006" +
    "\051\007\046\010\047\033\027\041\033\043\030\044\025" +
    "\001\002\000\010\004\uffe9\005\uffe9\015\uffe9\001\002\000" +
    "\010\004\uffea\005\uffea\015\uffea\001\002\000\012\033\uffef" +
    "\041\uffef\043\uffef\044\uffef\001\002\000\012\033\027\041" +
    "\033\043\030\044\025\001\002\000\012\033\027\041\033" +
    "\043\030\044\025\001\002\000\012\033\ufff3\041\ufff3\043" +
    "\ufff3\044\ufff3\001\002\000\012\033\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\012\033\ufff0\041\ufff0\043\ufff0\044" +
    "\ufff0\001\002\000\012\033\uffee\041\uffee\043\uffee\044\uffee" +
    "\001\002\000\012\033\ufff2\041\ufff2\043\ufff2\044\ufff2\001" +
    "\002\000\022\004\uffe8\005\uffe8\015\uffe8\032\036\033\037" +
    "\034\042\035\041\036\035\001\002\000\022\004\uffe7\005" +
    "\uffe7\015\uffe7\032\036\033\037\034\042\035\041\036\035" +
    "\001\002\000\014\011\016\013\005\014\013\017\014\043" +
    "\006\001\002\000\012\002\uffde\012\uffde\016\073\030\uffde" +
    "\001\002\000\014\011\016\013\005\014\013\017\014\043" +
    "\006\001\002\000\012\002\uffdd\012\uffdd\016\uffdd\030\uffdd" +
    "\001\002\000\004\002\001\001\002\000\012\033\027\041" +
    "\033\043\030\044\025\001\002\000\024\002\uffdf\012\uffdf" +
    "\016\uffdf\030\uffdf\032\036\033\037\034\042\035\041\036" +
    "\035\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\016\012\003\013\014\014\011\015\007\016" +
    "\006\017\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\047\003\031" +
    "\004\025\005\023\006\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\003\013\016\014\011\015\007" +
    "\016\006\001\001\000\002\001\001\000\012\012\021\014" +
    "\011\015\007\016\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\030\003\031\004\025\005\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\043\003\031\004\025\005\023\001\001\000" +
    "\002\001\001\000\004\007\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\042\003\031" +
    "\004\025\005\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\037\001\001\000\004\007\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\037\010\060\011\057\001\001\000\014\002\047" +
    "\003\031\004\025\005\023\006\051\001\001\000\002\001" +
    "\001\000\014\002\047\003\031\004\025\005\023\006\055" +
    "\001\001\000\014\002\047\003\031\004\025\005\023\006" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\067\003\031\004\025\005\023\001" +
    "\001\000\012\002\066\003\031\004\025\005\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\037\001\001" +
    "\000\004\007\037\001\001\000\012\012\071\014\011\015" +
    "\007\016\006\001\001\000\002\001\001\000\012\012\073" +
    "\014\011\015\007\016\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\076\003\031\004\025\005\023" +
    "\001\001\000\004\007\037\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT = new PlusIntOperator();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusIntOperator();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesIntOperator();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideIntOperator();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= int_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= double_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= str_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // int_expr ::= INT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // int_expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // int_expr ::= expr num_op expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // str_expr ::= STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("str_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LessThanCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LessOrEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GreaterThanCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GreaterOrEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NotEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_expr ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= NOT bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= expr num_rel expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= expr str_rel expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= assign_stat 
            {
              Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction si = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= if_stat 
            {
              Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction si = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= BEGIN instr END 
            {
              Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= output_stat 
            {
              Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction si = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= EXIT 
            {
              Instruction RESULT =null;
		 System.exit(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instr ::= instr SEMI instruction 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction si = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instr ::= instruction 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction si = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign_stat ::= IDENT ASSIGN expr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_stat ::= IF bool_expr THEN instruction 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfInstruction(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_stat ::= IF bool_expr THEN instruction ELSE instruction 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new IfElseInstruction(c, s, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // output_stat ::= PRINT LPAREN expr RPAREN 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
