
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\006\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\005\000\002\004\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\005\000\002\012\005" +
    "\000\002\011\005\000\002\011\003\000\002\013\005\000" +
    "\002\014\006\000\002\014\010\000\002\015\006\000\002" +
    "\015\006\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\014\011\015\014\011\017\013\030\006\042" +
    "\012\001\002\000\014\002\uffe5\012\uffe5\013\uffe5\016\uffe5" +
    "\030\uffe5\001\002\000\012\002\uffe0\012\uffe0\013\uffe0\030" +
    "\uffe0\001\002\000\014\011\015\014\011\017\013\030\006" +
    "\042\012\001\002\000\004\002\101\001\002\000\014\002" +
    "\uffe4\012\uffe4\013\uffe4\016\uffe4\030\uffe4\001\002\000\022" +
    "\006\036\007\030\010\033\020\025\040\026\041\032\042" +
    "\034\043\031\001\002\000\004\021\072\001\002\000\004" +
    "\036\023\001\002\000\014\002\uffe6\012\uffe6\013\uffe6\016" +
    "\uffe6\030\uffe6\001\002\000\014\011\015\014\011\017\013" +
    "\030\006\042\012\001\002\000\006\002\uffda\030\017\001" +
    "\002\000\014\011\015\014\011\017\013\030\006\042\012" +
    "\001\002\000\012\002\uffe1\012\uffe1\013\uffe1\030\uffe1\001" +
    "\002\000\006\012\022\030\017\001\002\000\014\002\uffe3" +
    "\012\uffe3\013\uffe3\016\uffe3\030\uffe3\001\002\000\022\006" +
    "\036\007\030\010\033\020\025\040\026\041\032\042\034" +
    "\043\031\001\002\000\010\004\062\005\063\037\071\001" +
    "\002\000\004\036\067\001\002\000\052\002\ufff6\004\ufff6" +
    "\005\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\001\002\000" +
    "\052\002\ufff9\004\ufff9\005\ufff9\012\ufff9\013\ufff9\015\ufff9" +
    "\016\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\037\ufff9\001\002\000\012\004\uffec\005\uffec\015\uffec\037" +
    "\uffec\001\002\000\052\002\ufff3\004\ufff3\005\ufff3\012\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\037\ufff3\001\002\000\052\002\ufff5\004" +
    "\ufff5\005\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\001\002" +
    "\000\012\004\uffeb\005\uffeb\015\uffeb\037\uffeb\001\002\000" +
    "\052\002\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\015\ufffb" +
    "\016\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\001\002\000\032\022\047\023\057\024\051\025" +
    "\052\026\045\027\056\031\050\032\043\033\054\034\044" +
    "\035\046\037\066\001\002\000\022\006\036\007\030\010" +
    "\033\020\025\040\026\041\032\042\034\043\031\001\002" +
    "\000\052\002\ufffa\004\ufffa\005\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\037\ufffa\001\002\000\052\002\ufff8\004\ufff8\005\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\016\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\037\ufff8\001\002\000\012\004" +
    "\uffea\005\uffea\015\uffea\037\uffea\001\002\000\030\022\047" +
    "\023\057\024\051\025\052\026\045\027\056\031\050\032" +
    "\043\033\054\034\044\035\046\001\002\000\014\020\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\001\002\000\014\020" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001\002\000\014" +
    "\020\uffee\040\uffee\041\uffee\042\uffee\043\uffee\001\002\000" +
    "\014\020\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002" +
    "\000\014\020\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\001" +
    "\002\000\014\020\000\040\000\041\000\042\000\043\000" +
    "\001\002\000\014\020\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\001\002\000\014\020\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\001\002\000\014\020\025\040\026\041\032\042" +
    "\034\043\031\001\002\000\014\020\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\001\002\000\014\020\025\040\026\041" +
    "\032\042\034\043\031\001\002\000\014\020\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\001\002\000\014\020\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\001\002\000\024\004\uffe7" +
    "\005\uffe7\015\uffe7\031\050\032\043\033\054\034\044\035" +
    "\046\037\uffe7\001\002\000\052\002\ufff4\004\ufff4\005\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\016\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\050\032\043" +
    "\033\054\034\044\035\046\037\ufff4\001\002\000\022\006" +
    "\036\007\030\010\033\020\025\040\026\041\032\042\034" +
    "\043\031\001\002\000\022\006\036\007\030\010\033\020" +
    "\025\040\026\041\032\042\034\043\031\001\002\000\012" +
    "\004\uffe8\005\uffe8\015\uffe8\037\uffe8\001\002\000\012\004" +
    "\uffe9\005\uffe9\015\uffe9\037\uffe9\001\002\000\014\002\uffdc" +
    "\012\uffdc\013\uffdc\016\uffdc\030\uffdc\001\002\000\004\037" +
    "\070\001\002\000\052\002\ufff7\004\ufff7\005\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\037\ufff7\001\002\000\014\002\uffdb\012" +
    "\uffdb\013\uffdb\016\uffdb\030\uffdb\001\002\000\014\020\025" +
    "\040\026\041\032\042\034\043\031\001\002\000\026\002" +
    "\uffdf\012\uffdf\013\uffdf\016\uffdf\030\uffdf\031\050\032\043" +
    "\033\054\034\044\035\046\001\002\000\010\004\062\005" +
    "\063\015\075\001\002\000\014\011\015\014\011\017\013" +
    "\030\006\042\012\001\002\000\014\002\uffde\012\uffde\013" +
    "\uffde\016\077\030\uffde\001\002\000\014\011\015\014\011" +
    "\017\013\030\006\042\012\001\002\000\014\002\uffdd\012" +
    "\uffdd\013\uffdd\016\uffdd\030\uffdd\001\002\000\004\002\001" +
    "\001\002\000\006\013\103\030\017\001\002\000\014\002" +
    "\uffe2\012\uffe2\013\uffe2\016\uffe2\030\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\016\011\015\012\004\013\013\014\003\015" +
    "\007\016\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\101\012\004\013\013\014\003\015\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\041" +
    "\003\026\004\036\005\073\006\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\020" +
    "\012\004\013\013\014\003\015\007\001\001\000\002\001" +
    "\001\000\012\012\017\013\013\014\003\015\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\034\003\026\004\036\005\023\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\052\010\054\001\001\000\014\002\041\003\026\004\036" +
    "\005\040\006\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\052\010\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\060\003\026\004" +
    "\036\006\037\001\001\000\002\001\001\000\012\002\057" +
    "\003\026\004\036\006\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\004\007\052" +
    "\001\001\000\014\002\041\003\026\004\036\005\064\006" +
    "\037\001\001\000\014\002\041\003\026\004\036\005\063" +
    "\006\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\072\003\026\004\036\006\037\001" +
    "\001\000\004\007\052\001\001\000\002\001\001\000\012" +
    "\012\075\013\013\014\003\015\007\001\001\000\002\001" +
    "\001\000\012\012\077\013\013\014\003\015\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void reportError(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    public void reportFatalError(String message, Object info) {
        reportError(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // numberOperation ::= PLUS 
            {
              operator.Operator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.PlusIntOperator() : new operator.impl.floating.PlusDoubleOperator();
                                                                                 System.out.println("Added operation PlusIntOperator " + e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberOperation",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // numberOperation ::= MINUS 
            {
              operator.Operator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.MinusIntOperator() : new operator.impl.floating.MinusDoubleOperator();
                                                                                 System.out.println("Added operation MinusIntOperator " + e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberOperation",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // numberOperation ::= TIMES 
            {
              operator.Operator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.TimesIntOperator() : new operator.impl.floating.TimesDoubleOperator();
                                                                                 System.out.println("Added operation TimesIntOperator " + e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberOperation",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // numberOperation ::= DIVIDE 
            {
              operator.Operator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.DivideIntOperator() : new operator.impl.floating.DivideDoubleOperator();
                                                                                 System.out.println("Added operation DivideIntOperator " + e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberOperation",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // numberOperation ::= MODE 
            {
              operator.Operator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.ModeIntOperator() : new operator.impl.floating.ModeDoubleOperator();
                                                                                 System.out.println("Added operation ModeIntOperator " + e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberOperation",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= ID 
            {
              expression.Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.ID(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= stringExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= numberExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= inputExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inputExpression ::= READ LPAREN RPAREN 
            {
              expression.Expression RESULT =null;
		
                                                                                 RESULT = new expression.impl.ReadExpression();
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputExpression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numberExpression ::= INT 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int e = (int)((double) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value);
		
                                                                                 RESULT = new expression.impl.IntExpression(e);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberExpression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numberExpression ::= DOUBLE 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e = (double)((int) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value);
		
                                                                                 RESULT = new expression.impl.DoubleExpression(e);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberExpression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numberExpression ::= expression numberOperation expression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		operator.Operator o = (operator.Operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e2 = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                 RESULT = new expression.impl.OperatorExpression(e, o, e2);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberExpression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stringExpression ::= STRING 
            {
              expression.Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.impl.StringExpression(s.substring(1, s.length()-1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringExpression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numberRelation ::= EQ 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.EqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numberRelation ::= LT 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.LessThanCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numberRelation ::= LE 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.LessOrEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numberRelation ::= GT 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.GreaterThanCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numberRelation ::= GE 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.GreaterOrEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numberRelation ::= NE 
            {
              condition.Condition RESULT =null;
		 RESULT = new condition.impl.NotEqualsCondition(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberRelation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // booleanExpression ::= TRUE 
            {
              expression.Expression RESULT =null;
		 RESULT = new expression.impl.BooleanExpression(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // booleanExpression ::= FALSE 
            {
              expression.Expression RESULT =null;
		 RESULT = new expression.impl.BooleanExpression(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleanExpression ::= NOT booleanExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.impl.NegationBooleanExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleanExpression ::= booleanExpression AND booleanExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e2 = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.impl.AndBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // booleanExpression ::= booleanExpression OR booleanExpression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e2 = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.impl.OrBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // booleanExpression ::= expression numberRelation expression 
            {
              expression.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		condition.Condition o = (condition.Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e2 = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expression.impl.ConditionBooleanExpression(e, o, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= assignInstruction 
            {
              instruction.Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction si = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= ifInstruction 
            {
              instruction.Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction si = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= outputInstruction 
            {
              instruction.Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction si = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= BEGIN instructionList END 
            {
              instruction.Instruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		instruction.impl.InstructionList si = (instruction.impl.InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                System.out.println("The process has begun");
                                                                                RESULT = new instruction.impl.BeginEndInstruction(si);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= SEMI instructionList EXIT 
            {
              instruction.Instruction RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		instruction.impl.InstructionList list = (instruction.impl.InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 new Main(list).exec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionList ::= instructionList SEMI instruction 
            {
              instruction.impl.InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		instruction.impl.InstructionList i = (instruction.impl.InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction si = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                System.out.println("Added instruction " + si.toString());
                                                                                i.add(si); RESULT = i;
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instructionList ::= instruction 
            {
              instruction.impl.InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction si = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = new instruction.impl.InstructionList(si);
//                                                                                new Main(RESULT).exec();
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignInstruction ::= ID ASSIGN expression 
            {
              instruction.Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                System.out.println("Assigned variable " + i);
                                                                                RESULT = new instruction.AssignInstruction(i,e);
                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignInstruction",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifInstruction ::= IF booleanExpression THEN instruction 
            {
              instruction.Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expression.Expression c = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction s = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new instruction.impl.IfInstruction(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifInstruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifInstruction ::= IF booleanExpression THEN instruction ELSE instruction 
            {
              instruction.Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expression.Expression c = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		instruction.Instruction s = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.Instruction s2 = (instruction.Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new instruction.impl.IfElseInstruction(c, s, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifInstruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // outputInstruction ::= WRITE LPAREN expression RPAREN 
            {
              instruction.Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new instruction.impl.OutputInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputInstruction",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // outputInstruction ::= WRITE LPAREN booleanExpression RPAREN 
            {
              instruction.Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expression.Expression e = (expression.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new instruction.impl.OutputInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputInstruction",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // program ::= instructionList 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		instruction.impl.InstructionList i = (instruction.impl.InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
