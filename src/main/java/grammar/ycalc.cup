import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

    public void reportError(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    public void reportFatalError(String message, Object info) {
        reportError(message, info);
        System.exit(1);
    }
:};


terminal           AND, OR, NOT, TRUE, FALSE;
terminal           BEGIN, END, EXIT;
terminal           IF, THEN, ELSE;
terminal           WRITE, READ;
terminal           ASSIGN;
terminal   	       EQ, LT, LE, GT, GE, NE;
terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, MODE, LPAREN, RPAREN;
terminal int       INT;
terminal double    DOUBLE;
terminal String    ID;
terminal String    STRING;


non terminal expression.Expression expression;
non terminal expression.Expression numberExpression;
non terminal expression.Expression stringExpression;
non terminal expression.Expression booleanExpression;
non terminal expression.Expression inputExpression;

non terminal operator.Operator numberOperation;

non terminal condition.Condition numberRelation;

non terminal instruction.impl.InstructionList instructionList;

non terminal instruction.Instruction instruction;
non terminal instruction.Instruction assignInstruction;
non terminal instruction.Instruction ifInstruction;
non terminal instruction.Instruction outputInstruction;
non terminal Main program;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODE;

precedence left OR, AND;
precedence left NOT;

precedence left ELSE;

start with program;

// TODO: NULL IS GETTING HERE
numberOperation ::= PLUS:e                                                    {:
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.PlusIntOperator() : new operator.impl.floating.PlusDoubleOperator();
                                                                                 System.out.println("Added operation PlusOperator " + e);
                                                                              :}
        | MINUS:e                                                             {:
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.MinusIntOperator() : new operator.impl.floating.MinusDoubleOperator();
                                                                                 System.out.println("Added operation MinusOperator " + e);
                                                                              :}
        | TIMES:e                                                             {:
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.TimesIntOperator() : new operator.impl.floating.TimesDoubleOperator();
                                                                                 System.out.println("Added operation TimesOperator " + e);
                                                                              :}
        | DIVIDE:e                                                            {:
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.DivideIntOperator() : new operator.impl.floating.DivideDoubleOperator();
                                                                                 System.out.println("Added operation DivideOperator " + e);
                                                                              :}
        | MODE:e                                                              {:
                                                                                 RESULT = (e instanceof Integer) ? new operator.impl.integer.ModeIntOperator() : new operator.impl.floating.ModeDoubleOperator();
                                                                                 System.out.println("Added operation ModeOperator " + e);
                                                                              :}
        ;

expression ::= ID:i                                                           {: RESULT = new expression.ID(i); :}
        | stringExpression:e                                                  {:
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        | numberExpression:e                                                  {:
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        | inputExpression:e                                                   {:
                                                                                 RESULT = e;
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        ;

inputExpression ::= READ LPAREN RPAREN                                        {:
                                                                                 RESULT = new expression.impl.ReadExpression();
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        ;

numberExpression ::= INT:e                                                    {:
                                                                                 RESULT = new expression.impl.IntExpression(e);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        | DOUBLE:e                                                            {:
                                                                                 RESULT = new expression.impl.DoubleExpression(e);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        | expression:e numberOperation:o expression:e2                        {:
                                                                                 RESULT = new expression.impl.OperatorExpression(e, o, e2);
                                                                                 System.out.println("Added expression " + RESULT);
                                                                              :}
        ;

stringExpression ::=  STRING:s                                                {: RESULT = new expression.impl.StringExpression(s.substring(1, s.length()-1)); :}
        ;

numberRelation ::=   EQ                                                       {: RESULT = new condition.impl.EqualsCondition(); :}
        | LT                                                                  {: RESULT = new condition.impl.LessThanCondition(); :}
        | LE                                                                  {: RESULT = new condition.impl.LessOrEqualsCondition(); :}
        | GT                                                                  {: RESULT = new condition.impl.GreaterThanCondition(); :}
        | GE                                                                  {: RESULT = new condition.impl.GreaterOrEqualsCondition(); :}
        | NE                                                                  {: RESULT = new condition.impl.NotEqualsCondition(); :}
        ;

booleanExpression ::= TRUE                                                    {: RESULT = new expression.impl.BooleanExpression(true); :}
        | FALSE                                                               {: RESULT = new expression.impl.BooleanExpression(false); :}
        | NOT booleanExpression:e                                             {: RESULT = new expression.impl.NegationBooleanExpression(e); :}
        | booleanExpression:e AND booleanExpression:e2                        {: RESULT = new expression.impl.AndBooleanExpression(e, e2); :}
        | booleanExpression:e OR booleanExpression:e2                         {: RESULT = new expression.impl.OrBooleanExpression(e, e2); :}
        | expression: e numberRelation:o expression:e2                        {: RESULT = new expression.impl.ConditionBooleanExpression(e, o, e2); :}
        ;

instruction ::= assignInstruction:si                                          {: RESULT = si; :}
        | ifInstruction:si                                                    {: RESULT = si; :}
        | outputInstruction:si                                                {: RESULT = si; :}
        | BEGIN instructionList:si END                                        {:
                                                                                System.out.println("The process has begun");
                                                                                RESULT = new instruction.impl.BeginEndInstruction(si);
                                                                              :}
        | SEMI instructionList:list EXIT                                      {: new Main(list).exec(); :}
        ;

instructionList ::= instructionList:i SEMI instruction:si                     {:
                                                                                System.out.println("Added instruction " + si.toString());
                                                                                i.add(si); RESULT = i;
                                                                              :}

        | instruction:si                                                      {:
                                                                                RESULT = new instruction.impl.InstructionList(si);
//                                                                                new Main(RESULT).exec();
                                                                              :}
        ;

assignInstruction ::= ID:i ASSIGN expression:e                                {:
                                                                                System.out.println("Assigned variable " + i);
                                                                                RESULT = new instruction.AssignInstruction(i,e);
                                                                              :}
        ;

ifInstruction ::= IF booleanExpression:c THEN instruction:s                   {: RESULT = new instruction.impl.IfInstruction(c, s); :}
        | IF booleanExpression:c THEN instruction:s ELSE instruction:s2       {: RESULT = new instruction.impl.IfElseInstruction(c, s, s2); :}
        ;

outputInstruction ::= WRITE LPAREN expression:e  RPAREN                       {: RESULT = new instruction.impl.OutputInstruction(e); :}
        | WRITE LPAREN booleanExpression:e RPAREN                             {: RESULT = new instruction.impl.OutputInstruction(e); :}
        ;

program ::= instructionList:i
        {:
            Main program = new Main(i);
            program.exec();
        :}
        ;